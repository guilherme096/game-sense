services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "${HOST_PORT}:${CONTAINER_PORT}"
    volumes:
      - ${NGINX_HTML_PATH}
      - ${NGINX_CONF_PATH}
    depends_on:
      - club-service
      - live-game-service
      - player-service
      - league-service
      - kafka
    networks:
      - app-network

  club-service:
    build:
      context: backend/club_service
    image: club_service-image
    depends_on:
      - sql_db
      - redis_db
      - kafka
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - app-network

  live-game-service:
    build:
      context: backend/live_game_service
    image: live_game_service-image
    depends_on:
      - sql_db
      - redis_db
      - kafka
    networks:
      - app-network

  player-service:
    build:
      context: backend/player_service
    image: player_service-image
    depends_on:
      - sql_db
      - redis_db
      - kafka
    networks:
      - app-network

  league-service:
    build:
      context: backend/league_service
    image: league_service-image
    depends_on:
      - sql_db
      - redis_db
      - kafka
    networks:
      - app-network

  sql_db:
    image: mysql:8.0
    container_name: sql_db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - app-network

  redis_db:
    image: redis:latest
    container_name: redis_db
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_INTERNAL_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.2
    environment:
      KAFKA_BROKERCONNECT: kafka:${KAFKA_INTERNAL_PORT}
    ports:
      - ${KAFDROP_EXTERNAL_PORT}:${KAFDROP_EXTERNAL_PORT}
    networks:
      - app-network

  game-generator:
    build:
      context: game_generator
    image: game_generator-image
    depends_on:
      - kafka
    networks:
      - app-network

volumes:
  db-data:

networks:
  app-network:
    driver: bridge
